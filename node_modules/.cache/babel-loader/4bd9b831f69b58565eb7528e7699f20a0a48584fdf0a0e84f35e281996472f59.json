{"ast":null,"code":"import _slicedToArray from\"/Users/supriyasingh/Desktop/cloud-cafe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";import{AsyncPaginate}from\"react-select-async-paginate\";import{GEO_API_URL,geoApiOptions}from\"../../api\";import{jsx as _jsx}from\"react/jsx-runtime\";var Search=function Search(_ref){var onSearchChange=_ref.onSearchChange;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),search=_useState2[0],setSearch=_useState2[1];var loadOptions=function loadOptions(inputValue){return fetch(\"\".concat(GEO_API_URL,\"/cities?minPopulation=1000000&namePrefix=\").concat(inputValue),geoApiOptions).then(function(response){return response.json();}).then(function(response){return{options:response.data.map(function(city){return{value:\"\".concat(city.latitude,\" \").concat(city.longitude),label:\"\".concat(city.name,\", \").concat(city.countryCode)};})};}).catch(function(err){return console.error(err);});};var handleOnChange=function handleOnChange(searchData){setSearch(searchData);onSearchChange(searchData);};return/*#__PURE__*/_jsx(AsyncPaginate,{placeholder:\"Search for city\"// to prevernt error\n,debounceTimeout:600,value:search,onChange:handleOnChange,loadOptions:loadOptions});};export default Search;","map":{"version":3,"names":["useState","AsyncPaginate","GEO_API_URL","geoApiOptions","Search","onSearchChange","search","setSearch","loadOptions","inputValue","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","catch","err","console","error","handleOnChange","searchData"],"sources":["/Users/supriyasingh/Desktop/cloud-cafe/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = (inputValue) => {\n    return fetch(\n      `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n      geoApiOptions\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        return {\n          options: response.data.map((city) => {\n            return {\n              value: `${city.latitude} ${city.longitude}`,\n              label: `${city.name}, ${city.countryCode}`,\n            };\n          }),\n        };\n      }) \n      .catch((err) => console.error(err));\n  };\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for city\"\n      // to prevernt error\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\nexport default Search;\n"],"mappings":"4HAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,aAAa,KAAQ,6BAA6B,CAC3D,OAASC,WAAW,CAAEC,aAAa,KAAQ,WAAW,CAAC,2CACvD,GAAMC,OAAM,CAAG,QAATA,OAAM,MAA2B,IAArBC,eAAc,MAAdA,cAAc,CAC9B,cAA4BL,QAAQ,CAAC,IAAI,CAAC,wCAAnCM,MAAM,eAAEC,SAAS,eAExB,GAAMC,YAAW,CAAG,QAAdA,YAAW,CAAIC,UAAU,CAAK,CAClC,MAAOC,MAAK,WACPR,WAAW,qDAA4CO,UAAU,EACpEN,aAAa,CACd,CACEQ,IAAI,CAAC,SAACC,QAAQ,QAAKA,SAAQ,CAACC,IAAI,EAAE,GAAC,CACnCF,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClB,MAAO,CACLE,OAAO,CAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAC,SAACC,IAAI,CAAK,CACnC,MAAO,CACLC,KAAK,WAAKD,IAAI,CAACE,QAAQ,aAAIF,IAAI,CAACG,SAAS,CAAE,CAC3CC,KAAK,WAAKJ,IAAI,CAACK,IAAI,cAAKL,IAAI,CAACM,WAAW,CAC1C,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,CAAC,CACDC,KAAK,CAAC,SAACC,GAAG,QAAKC,QAAO,CAACC,KAAK,CAACF,GAAG,CAAC,GAAC,CACvC,CAAC,CAED,GAAMG,eAAc,CAAG,QAAjBA,eAAc,CAAIC,UAAU,CAAK,CACrCtB,SAAS,CAACsB,UAAU,CAAC,CACrBxB,cAAc,CAACwB,UAAU,CAAC,CAC5B,CAAC,CAED,mBACE,KAAC,aAAa,EACZ,WAAW,CAAC,iBACZ;AAAA,CACA,eAAe,CAAE,GAAI,CACrB,KAAK,CAAEvB,MAAO,CACd,QAAQ,CAAEsB,cAAe,CACzB,WAAW,CAAEpB,WAAY,EACzB,CAEN,CAAC,CACD,cAAeJ,OAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}